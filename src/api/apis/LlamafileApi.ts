/* tslint:disable */
/* eslint-disable */
/**
 * Memory Cache Hub
 * A backend server for Memory Cache.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface ApiDeleteLlamafileApiV1DeleteLlamafileDeleteRequest {
    llamafileFilename: string;
}

export interface ApiStartLlamafileApiV1StartLlamafilePostRequest {
    llamafileFilename: string;
}

export interface ApiStopLlamafileApiV1StopLlamafilePostRequest {
    llamafileFilename: string;
}

export interface CheckLlamafileStatusApiV1CheckLlamafileStatusPostRequest {
    llamafileFilename: string;
}

export interface DownloadLlamafileByNameApiV1DownloadLlamafileByNamePostRequest {
    llamafileFilename: string;
}

/**
 * 
 */
export class LlamafileApi extends runtime.BaseAPI {

    /**
     * Api Delete Llamafile
     */
    async apiDeleteLlamafileApiV1DeleteLlamafileDeleteRaw(requestParameters: ApiDeleteLlamafileApiV1DeleteLlamafileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.llamafileFilename === null || requestParameters.llamafileFilename === undefined) {
            throw new runtime.RequiredError('llamafileFilename','Required parameter requestParameters.llamafileFilename was null or undefined when calling apiDeleteLlamafileApiV1DeleteLlamafileDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.llamafileFilename !== undefined) {
            queryParameters['llamafile_filename'] = requestParameters.llamafileFilename;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/delete_llamafile`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Delete Llamafile
     */
    async apiDeleteLlamafileApiV1DeleteLlamafileDelete(requestParameters: ApiDeleteLlamafileApiV1DeleteLlamafileDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiDeleteLlamafileApiV1DeleteLlamafileDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Running Llamafile Info
     */
    async apiRunningLlamafileInfoApiV1RunningLlamafileInfoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/running_llamafile_info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Running Llamafile Info
     */
    async apiRunningLlamafileInfoApiV1RunningLlamafileInfoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiRunningLlamafileInfoApiV1RunningLlamafileInfoGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Api Start Llamafile
     */
    async apiStartLlamafileApiV1StartLlamafilePostRaw(requestParameters: ApiStartLlamafileApiV1StartLlamafilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.llamafileFilename === null || requestParameters.llamafileFilename === undefined) {
            throw new runtime.RequiredError('llamafileFilename','Required parameter requestParameters.llamafileFilename was null or undefined when calling apiStartLlamafileApiV1StartLlamafilePost.');
        }

        const queryParameters: any = {};

        if (requestParameters.llamafileFilename !== undefined) {
            queryParameters['llamafile_filename'] = requestParameters.llamafileFilename;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/start_llamafile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Start Llamafile
     */
    async apiStartLlamafileApiV1StartLlamafilePost(requestParameters: ApiStartLlamafileApiV1StartLlamafilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiStartLlamafileApiV1StartLlamafilePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Api Stop Llamafile
     */
    async apiStopLlamafileApiV1StopLlamafilePostRaw(requestParameters: ApiStopLlamafileApiV1StopLlamafilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.llamafileFilename === null || requestParameters.llamafileFilename === undefined) {
            throw new runtime.RequiredError('llamafileFilename','Required parameter requestParameters.llamafileFilename was null or undefined when calling apiStopLlamafileApiV1StopLlamafilePost.');
        }

        const queryParameters: any = {};

        if (requestParameters.llamafileFilename !== undefined) {
            queryParameters['llamafile_filename'] = requestParameters.llamafileFilename;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/stop_llamafile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Stop Llamafile
     */
    async apiStopLlamafileApiV1StopLlamafilePost(requestParameters: ApiStopLlamafileApiV1StopLlamafilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiStopLlamafileApiV1StopLlamafilePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check Llamafile Status
     */
    async checkLlamafileStatusApiV1CheckLlamafileStatusPostRaw(requestParameters: CheckLlamafileStatusApiV1CheckLlamafileStatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.llamafileFilename === null || requestParameters.llamafileFilename === undefined) {
            throw new runtime.RequiredError('llamafileFilename','Required parameter requestParameters.llamafileFilename was null or undefined when calling checkLlamafileStatusApiV1CheckLlamafileStatusPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.llamafileFilename !== undefined) {
            queryParameters['llamafile_filename'] = requestParameters.llamafileFilename;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/check_llamafile_status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Check Llamafile Status
     */
    async checkLlamafileStatusApiV1CheckLlamafileStatusPost(requestParameters: CheckLlamafileStatusApiV1CheckLlamafileStatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.checkLlamafileStatusApiV1CheckLlamafileStatusPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download Llamafile By Name
     */
    async downloadLlamafileByNameApiV1DownloadLlamafileByNamePostRaw(requestParameters: DownloadLlamafileByNameApiV1DownloadLlamafileByNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.llamafileFilename === null || requestParameters.llamafileFilename === undefined) {
            throw new runtime.RequiredError('llamafileFilename','Required parameter requestParameters.llamafileFilename was null or undefined when calling downloadLlamafileByNameApiV1DownloadLlamafileByNamePost.');
        }

        const queryParameters: any = {};

        if (requestParameters.llamafileFilename !== undefined) {
            queryParameters['llamafile_filename'] = requestParameters.llamafileFilename;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/download_llamafile_by_name`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Download Llamafile By Name
     */
    async downloadLlamafileByNameApiV1DownloadLlamafileByNamePost(requestParameters: DownloadLlamafileByNameApiV1DownloadLlamafileByNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.downloadLlamafileByNameApiV1DownloadLlamafileByNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Llamafiles
     */
    async listLlamafilesApiV1ListLlamafilesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/list_llamafiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Llamafiles
     */
    async listLlamafilesApiV1ListLlamafilesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listLlamafilesApiV1ListLlamafilesGetRaw(initOverrides);
        return await response.value();
    }

}
