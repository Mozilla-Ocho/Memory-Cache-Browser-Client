/* tslint:disable */
/* eslint-disable */
/**
 * Memory Cache Hub
 * A backend server for Memory Cache.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface ApiSyncProjectFilesApiV1SyncProjectFilesPostRequest {
    projectId: number;
}

export interface ListProjectFilesApiV1ListProjectFilesProjectIdGetRequest {
    projectId: number;
}

export interface UploadFileApiV1UploadFilePostRequest {
    projectName: string;
    filePath: string;
    file: Blob;
}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     * Api Sync Project Files
     */
    async apiSyncProjectFilesApiV1SyncProjectFilesPostRaw(requestParameters: ApiSyncProjectFilesApiV1SyncProjectFilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling apiSyncProjectFilesApiV1SyncProjectFilesPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.projectId !== undefined) {
            queryParameters['project_id'] = requestParameters.projectId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/sync_project_files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Api Sync Project Files
     */
    async apiSyncProjectFilesApiV1SyncProjectFilesPost(requestParameters: ApiSyncProjectFilesApiV1SyncProjectFilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.apiSyncProjectFilesApiV1SyncProjectFilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Project Files
     */
    async listProjectFilesApiV1ListProjectFilesProjectIdGetRaw(requestParameters: ListProjectFilesApiV1ListProjectFilesProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling listProjectFilesApiV1ListProjectFilesProjectIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/list_project_files/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List Project Files
     */
    async listProjectFilesApiV1ListProjectFilesProjectIdGet(requestParameters: ListProjectFilesApiV1ListProjectFilesProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.listProjectFilesApiV1ListProjectFilesProjectIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload File
     */
    async uploadFileApiV1UploadFilePostRaw(requestParameters: UploadFileApiV1UploadFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectName === null || requestParameters.projectName === undefined) {
            throw new runtime.RequiredError('projectName','Required parameter requestParameters.projectName was null or undefined when calling uploadFileApiV1UploadFilePost.');
        }

        if (requestParameters.filePath === null || requestParameters.filePath === undefined) {
            throw new runtime.RequiredError('filePath','Required parameter requestParameters.filePath was null or undefined when calling uploadFileApiV1UploadFilePost.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadFileApiV1UploadFilePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.projectName !== undefined) {
            formParams.append('project_name', requestParameters.projectName as any);
        }

        if (requestParameters.filePath !== undefined) {
            formParams.append('file_path', requestParameters.filePath as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/v1/upload_file`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Upload File
     */
    async uploadFileApiV1UploadFilePost(requestParameters: UploadFileApiV1UploadFilePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.uploadFileApiV1UploadFilePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
